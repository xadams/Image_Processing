#!/usr/bin/env python3
"""
Unit and regression test for the touch_sensor_proj package.
"""

# Import package, test suite, and other packages as needed
import errno
import os
import sys
import unittest
from contextlib import contextmanager
from io import StringIO
import numpy as np
import logging
from Image_Processing.data_proc import main, data_process, peak_find

logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)
DISABLE_REMOVE = logger.isEnabledFor(logging.DEBUG)
# TODO: Remove output files after tests
TEST_DIR = os.path.dirname(__file__)
MAIN_DIR = os.path.join(TEST_DIR, '..')
TEST_DATA_DIR = os.path.join(TEST_DIR, 'data_proc')
PROJ_DIR = os.path.join(MAIN_DIR, 'Image_Processing')
DATA_DIR = os.path.join(PROJ_DIR, 'data')
SAMPLE_DATA_FILE_LOC = os.path.join(DATA_DIR, 'swipe_motion.csv')
COL_TEST_FILE_LOC = os.path.join(TEST_DATA_DIR, 'swipe_motion_diff_cols.cav')


# Assumes running tests from the main directory
DEF_CSV_OUT = os.path.join(MAIN_DIR, 'swipe_motion_processed.csv')
DEF_PNG_OUT = os.path.join(MAIN_DIR, 'swipe_motion_processed.png')


def silent_remove(filename, disable=False):
    """
    Removes the target file name, catching and ignoring errors that indicate that the
    file does not exist.
    @param filename: The file to remove.
    @param disable: boolean to flag if want to disable removal
    """
    if not disable:
        try:
            os.remove(filename)
        except OSError as e:
            if e.errno != errno.ENOENT:
                raise


class TestMain(unittest.TestCase):
    # These tests make sure that the program can run properly from main
    def testSampleData(self):
        # Checks that runs with defaults and that files are created
        test_input = ["-c", SAMPLE_DATA_FILE_LOC]
        try:
            if logger.isEnabledFor(logging.DEBUG):
                main(test_input)
            # checks that the expected message is sent to standard out
            with capture_stdout(main, test_input) as output:
                self.assertTrue("swipe_motion_processed" in output)

            self.assertTrue(os.path.isfile("swipe_motion_processed.csv"))
            self.assertTrue(os.path.isfile("swipe_motion_processed.png"))
        finally:
            silent_remove(DEF_CSV_OUT, disable=DISABLE_REMOVE)
            silent_remove(DEF_PNG_OUT, disable=DISABLE_REMOVE)


class TestMainFailWell(unittest.TestCase):
    def testMissingFile(self):
        test_input = ["-c", "ghost.txt"]
        if logger.isEnabledFor(logging.DEBUG):
            main(test_input)
        with capture_stderr(main, test_input) as output:
            self.assertTrue("ghost.txt" in output)

    def testNoArgs(self):
        with capture_stderr(main, []) as output:
            self.assertTrue("Problems reading file" in output)

    def testDataDiffNumCols(self):
        test_input = ["-c", COL_TEST_FILE_LOC]
        if logger.isEnabledFor(logging.DEBUG):
            main(test_input)
        with capture_stderr(main, test_input) as output:
            self.assertFalse("Wrong number of columns" in output)


class TestDataPorcess(unittest.TestCase):
    def testSampleData(self):
        # Tests that the np array generated by the data_analysis function matches saved expected results
        csv_data = np.loadtxt(fname=SAMPLE_DATA_FILE_LOC, delimiter=',')
        analysis_results = data_process(csv_data)
        expected_results = np.loadtxt(fname=os.path.join(TEST_DATA_DIR, "swipe_motion_processed_expected.csv"),
                                      delimiter=',')
        self.assertTrue(np.allclose(expected_results, analysis_results))

    def testSampleData2(self):
        # A second check, with slightly different values, of the data_analysis function
        csv_data = np.loadtxt(fname=os.path.join(TEST_DATA_DIR, "swipe_motion_2.csv"), delimiter=',')
        analysis_results = data_process(csv_data)
        expected_results = np.loadtxt(fname=os.path.join(TEST_DATA_DIR, "swipe_motion_processed_expected2.csv"),
                                      delimiter=',')
        self.assertTrue(np.allclose(expected_results, analysis_results))


class TestPeakfind(unittest.TestCase):
    def testPeakfind(self):
        csv_data = np.loadtxt(fname=os.path.join(TEST_DIR, 'swipe_motion_processed.csv'), delimiter=',')
        peak_results = peak_find(csv_data)
        expected_results = np.loadtxt(fname=os.path.join(TEST_DATA_DIR, "peaks_expected.csv"), delimiter=',')
        self.assertTrue(np.allclose(expected_results, peak_results))

# Utility functions

# From http://schinckel.net/2013/04/15/capture-and-test-sys.stdout-sys.stderr-in-unittest.testcase/


@contextmanager
def capture_stdout(command, *args, **kwargs):
    # pycharm doesn't know six very well, so ignore the false warning
    # noinspection PyCallingNonCallable
    out, sys.stdout = sys.stdout, StringIO()
    command(*args, **kwargs)
    sys.stdout.seek(0)
    yield sys.stdout.read()
    sys.stdout = out


@contextmanager
def capture_stderr(command, *args, **kwargs):
    # pycharm doesn't know six very well, so ignore the false warning
    # noinspection PyCallingNonCallable
    err, sys.stderr = sys.stderr, StringIO()
    command(*args, **kwargs)
    sys.stderr.seek(0)
    yield sys.stderr.read()
    sys.stderr = err
